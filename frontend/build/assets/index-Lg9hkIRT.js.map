{"version":3,"file":"index-Lg9hkIRT.js","sources":["../../src/pages/RegisterPage/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\nimport { register, selectAuthLoading, selectAuthError } from '../../store/slices/authSlice';\nimport { AppDispatch } from '../../store/types';\n\nconst RegisterPage: React.FC = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch<AppDispatch>();\n  const navigate = useNavigate();\n  const loading = useSelector(selectAuthLoading);\n  const error = useSelector(selectAuthError);\n  \n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    password: '',\n    confirmPassword: '',\n    agreeTerms: false\n  });\n\n  const [formErrors, setFormErrors] = useState<{\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    phone?: string;\n    password?: string;\n    confirmPassword?: string;\n    agreeTerms?: string;\n  }>({});\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n    \n    // Clear error when field is changed\n    if (formErrors[name as keyof typeof formErrors]) {\n      setFormErrors(prev => ({\n        ...prev,\n        [name]: undefined\n      }));\n    }\n  };\n\n  const validateForm = () => {\n    const errors: {[key: string]: string} = {};\n    \n    if (!formData.firstName.trim()) {\n      errors.firstName = t('register.firstNameRequired');\n    }\n    \n    if (!formData.lastName.trim()) {\n      errors.lastName = t('register.lastNameRequired');\n    }\n    \n    if (!formData.email.trim()) {\n      errors.email = t('register.emailRequired');\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      errors.email = t('register.emailInvalid');\n    }\n    \n    if (formData.phone && !/^\\+?\\d{10,15}$/.test(formData.phone.replace(/\\s/g, ''))) {\n      errors.phone = t('register.phoneInvalid');\n    }\n    \n    if (!formData.password) {\n      errors.password = t('register.passwordRequired');\n    } else if (formData.password.length < 8) {\n      errors.password = t('register.passwordTooShort');\n    }\n    \n    if (formData.password !== formData.confirmPassword) {\n      errors.confirmPassword = t('register.passwordsDoNotMatch');\n    }\n    \n    if (!formData.agreeTerms) {\n      errors.agreeTerms = t('register.termsRequired');\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n    \n    try {\n      await dispatch(register({\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        email: formData.email,\n        phone: formData.phone,\n        password: formData.password\n      })).unwrap();\n      navigate('/login?registered=true');\n    } catch (err: any) {\n      console.error('Registration failed:', err);\n    }\n  };\n\n  return (\n    <div className=\"register-page\">\n      <Helmet>\n        <title>{t('register.pageTitle')} | Mart.az</title>\n        <meta name=\"description\" content={t('register.metaDescription')} />\n      </Helmet>\n\n      <div className=\"register-container\">\n        <div className=\"auth-form-container\">\n          <h1 className=\"auth-title\">{t('register.title')}</h1>\n          <p className=\"auth-subtitle\">{t('register.subtitle')}</p>\n\n          {error && (\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {error}\n            </div>\n          )}\n\n          <form onSubmit={handleSubmit} className=\"auth-form\">\n            <div className=\"form-row\">\n              <div className=\"form-group\">\n                <label htmlFor=\"firstName\">{t('register.firstNameLabel')}</label>\n                <input\n                  type=\"text\"\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  value={formData.firstName}\n                  onChange={handleChange}\n                  className={`form-control ${formErrors.firstName ? 'is-invalid' : ''}`}\n                  placeholder={t('register.firstNamePlaceholder')}\n                />\n                {formErrors.firstName && (\n                  <div className=\"invalid-feedback\">{formErrors.firstName}</div>\n                )}\n              </div>\n\n              <div className=\"form-group\">\n                <label htmlFor=\"lastName\">{t('register.lastNameLabel')}</label>\n                <input\n                  type=\"text\"\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  value={formData.lastName}\n                  onChange={handleChange}\n                  className={`form-control ${formErrors.lastName ? 'is-invalid' : ''}`}\n                  placeholder={t('register.lastNamePlaceholder')}\n                />\n                {formErrors.lastName && (\n                  <div className=\"invalid-feedback\">{formErrors.lastName}</div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">{t('register.emailLabel')}</label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                value={formData.email}\n                onChange={handleChange}\n                className={`form-control ${formErrors.email ? 'is-invalid' : ''}`}\n                placeholder={t('register.emailPlaceholder')}\n              />\n              {formErrors.email && (\n                <div className=\"invalid-feedback\">{formErrors.email}</div>\n              )}\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"phone\">{t('register.phoneLabel')}</label>\n              <input\n                type=\"tel\"\n                id=\"phone\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleChange}\n                className={`form-control ${formErrors.phone ? 'is-invalid' : ''}`}\n                placeholder={t('register.phonePlaceholder')}\n              />\n              {formErrors.phone && (\n                <div className=\"invalid-feedback\">{formErrors.phone}</div>\n              )}\n              <small className=\"form-text text-muted\">{t('register.phoneHelp')}</small>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">{t('register.passwordLabel')}</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                name=\"password\"\n                value={formData.password}\n                onChange={handleChange}\n                className={`form-control ${formErrors.password ? 'is-invalid' : ''}`}\n                placeholder={t('register.passwordPlaceholder')}\n              />\n              {formErrors.password && (\n                <div className=\"invalid-feedback\">{formErrors.password}</div>\n              )}\n              <small className=\"form-text text-muted\">{t('register.passwordHelp')}</small>\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"confirmPassword\">{t('register.confirmPasswordLabel')}</label>\n              <input\n                type=\"password\"\n                id=\"confirmPassword\"\n                name=\"confirmPassword\"\n                value={formData.confirmPassword}\n                onChange={handleChange}\n                className={`form-control ${formErrors.confirmPassword ? 'is-invalid' : ''}`}\n                placeholder={t('register.confirmPasswordPlaceholder')}\n              />\n              {formErrors.confirmPassword && (\n                <div className=\"invalid-feedback\">{formErrors.confirmPassword}</div>\n              )}\n            </div>\n\n            <div className=\"form-group terms-checkbox\">\n              <div className={`custom-checkbox ${formErrors.agreeTerms ? 'is-invalid' : ''}`}>\n                <input\n                  type=\"checkbox\"\n                  id=\"agreeTerms\"\n                  name=\"agreeTerms\"\n                  checked={formData.agreeTerms}\n                  onChange={handleChange}\n                />\n                <label htmlFor=\"agreeTerms\">\n                  {t('register.termsLabel')}{' '}\n                  <Link to=\"/terms\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    {t('register.termsLinkText')}\n                  </Link>\n                </label>\n              </div>\n              {formErrors.agreeTerms && (\n                <div className=\"invalid-feedback\">{formErrors.agreeTerms}</div>\n              )}\n            </div>\n\n            <button \n              type=\"submit\" \n              className=\"btn btn-primary btn-block\"\n              disabled={loading}\n            >\n              {loading ? t('common.loading') : t('register.registerButton')}\n            </button>\n          </form>\n\n          <div className=\"auth-footer\">\n            <p>\n              {t('register.haveAccount')}{' '}\n              <Link to=\"/login\" className=\"auth-link\">\n                {t('register.loginNow')}\n              </Link>\n            </p>\n          </div>\n        </div>\n\n        <div className=\"auth-benefits\">\n          <h2>{t('register.whyRegister')}</h2>\n          <ul>\n            <li>{t('register.benefit1')}</li>\n            <li>{t('register.benefit2')}</li>\n            <li>{t('register.benefit3')}</li>\n            <li>{t('register.benefit4')}</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage; "],"names":["RegisterPage","t","useTranslation","dispatch","useDispatch","navigate","useNavigate","loading","useSelector","selectAuthLoading","error","selectAuthError","formData","setFormData","useState","formErrors","setFormErrors","handleChange","e","name","value","type","checked","prev","validateForm","errors","handleSubmit","register","err","jsxs","Helmet","jsx","Link"],"mappings":"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"}